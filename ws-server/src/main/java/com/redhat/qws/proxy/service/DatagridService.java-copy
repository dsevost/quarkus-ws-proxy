package com.redhat.qws.proxy.service;

import java.util.concurrent.CompletableFuture;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.event.Observes;

import com.redhat.qws.proxy.model.Message;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.infinispan.client.hotrod.DefaultTemplate;
import org.infinispan.client.hotrod.RemoteCache;
import org.infinispan.client.hotrod.RemoteCacheManager;
import org.infinispan.client.hotrod.annotation.ClientCacheEntryCreated;
import org.infinispan.client.hotrod.annotation.ClientCacheEntryModified;
import org.infinispan.client.hotrod.annotation.ClientCacheEntryRemoved;
import org.infinispan.client.hotrod.annotation.ClientListener;
import org.infinispan.client.hotrod.configuration.ClientIntelligence;
import org.infinispan.client.hotrod.configuration.Configuration;
import org.infinispan.client.hotrod.configuration.ConfigurationBuilder;
import org.infinispan.client.hotrod.event.ClientCacheEntryCreatedEvent;
import org.infinispan.client.hotrod.event.ClientCacheEntryModifiedEvent;
import org.infinispan.client.hotrod.event.ClientCacheEntryRemovedEvent;
import org.jboss.logging.Logger;

import io.quarkus.runtime.StartupEvent;

@ApplicationScoped
public class DatagridService {
    private static final Logger LOGGER = Logger.getLogger(DatagridService.class);

    @ConfigProperty(name = "datagrid.cache.name", defaultValue = "quarkus")
    String cacheName;

    @ConfigProperty(name = "datagrid.use", defaultValue = "false")
    boolean datagridUsage;

    @ConfigProperty(name = "datagrid.debug.listener", defaultValue = "false")
    boolean debugListener;

    //

    @ConfigProperty(name = "datagrid.cache.create-force", defaultValue = "false")
    boolean cacheCreateForce;

    @ConfigProperty(name = "quarkus.infinispan-client.auth-realm", defaultValue = "default")
    String authRealm;

    @ConfigProperty(name = "quarkus.infinispan-client.auth-server-name", defaultValue = "localhost")
    String authServerName;

    @ConfigProperty(name = "quarkus.infinispan-client.auth-username", defaultValue = "developer")
    String authUserName;

    @ConfigProperty(name = "quarkus.infinispan-client.auth-password", defaultValue = "developer")
    String authUserPassword;

    // @ConfigProperty(name = "quarkus.infinispan-client.client-intelligence")
    ClientIntelligence clientIntelligence = ClientIntelligence.BASIC;

    @ConfigProperty(name = "quarkus.infinispan-client.sasl-mechanism", defaultValue = "DIGEST-MD5")
    String clientSaslMech;

    @ConfigProperty(name = "quarkus.infinispan-client.server-list", defaultValue = "127.0.0.1:11222")
    String clientServerList;

    @ConfigProperty(name = "quarkus.infinispan-client.trust-store", defaultValue = "trustStore.jks")
    String clientTrustStore;

    @ConfigProperty(name = "quarkus.infinispan-client.trust-store-password", defaultValue = "changeme")
    String clientTrustStorePassword;

    @ConfigProperty(name = "quarkus.infinispan-client.trust-store-type", defaultValue = "JKS")
    String clientTrustStoreType;

    @ConfigProperty(name = "datagrid.cache.create-type", defaultValue = "org.infinispan.DIST_ASYNC")
    String cacheCreateType;

    @ConfigProperty(name = "datagrid.client.sni", defaultValue = "1")
    String hotrodSni;

    // it's needed to create instance manually due to SNI
    // @Inject
    RemoteCacheManager rcm;

    RemoteCache<String, CachedMessage> cache = null;

    public void store(String user, String clientId, Message message) {
        final CachedMessage cachedMessage = new CachedMessage(user, clientId, message);
        getCache().put(cachedMessage.getKey(), cachedMessage);
    }

    public CompletableFuture<CachedMessage> storeAsync(String user, String clientId, Message message) {
        final CachedMessage cachedMessage = new CachedMessage(user, clientId, message);
        return getCache().putAsync(cachedMessage.getKey(), cachedMessage);
    }

    public CompletableFuture<CachedMessage> getAsync(String key) {
        return getCache().getAsync(key);
    }

    public CompletableFuture<CachedMessage> removeAsync(String key) {
        LOGGER.debugf("Removing message(key=[%s]) from datagrid", key);
        return getCache().removeAsync(key);
    }

    public void register(Object listener) {
        getCache().addClientListener(listener);
    }

    public void unregister(Object listener) {
        getCache().removeClientListener(listener);
    }

    void onStart(@Observes StartupEvent ev) {
        if (datagridUsage) {
            rcm = getRemoteCacheManger();
        } else {
            LOGGER.infof("Datagrid will not be used, to use it set property '%s' to true", "datagrid.use");
            return;
        }
        if (cacheCreateForce) {
            LOGGER.debugf("datagrid is using(%s=true) and cache create is forced(%s=true)", "datagrid.use",
                    "datagrid.cache.create-force");
            cache = createCache(cacheName);
            LOGGER.debugf("Remote cache created: %s", cache.serverStatistics());
        } else {
            cache = getCache();
        }

        if (debugListener && datagridUsage) {
            cache.addClientListener(new EventPrintListener());
        }
    }

    private RemoteCache<String, CachedMessage> getCache() {
        if (cache == null) {
            rcm = getRemoteCacheManger();
            // if (rcm == null) {
            //     RuntimeException e = new RuntimeException("Remote Cache Manager is NULL");
            //     LOGGER.warn("", e);
            //     throw e;
            // }
            cache = rcm.getCache(cacheName);
        }
        return cache;
    }

    private RemoteCache<String, CachedMessage> createCache(String cacheName) {
        DefaultTemplate dt = DefaultTemplate.DIST_ASYNC;
        for (DefaultTemplate t : DefaultTemplate.values()) {
            if (t.getTemplateName().equals(cacheCreateType)) {
                dt = t;
                break;
            }
        }
        try {
            LOGGER.infof("Creating cache [%s] with type [%s]", cacheName, dt);
            return rcm.administration().getOrCreateCache(cacheName, dt);
        } catch (Throwable t) {
            LOGGER.debug("Error occured", t);
            throw new RuntimeException(t);
        }
    }

    private RemoteCacheManager getRemoteCacheManger() {
        if (rcm != null && rcm.isStarted()) {
            return rcm;
        }
        final ConfigurationBuilder cb = new ConfigurationBuilder();
        cb.security().authentication().realm(authRealm).serverName(authServerName).username(authUserName)
                .password(authUserPassword).saslMechanism(clientSaslMech).clientIntelligence(clientIntelligence);
        cb.security().ssl().trustStoreFileName(clientTrustStore)
                .trustStorePassword(clientTrustStorePassword.toCharArray()).trustStoreType(clientTrustStoreType);
        cb.addServers(clientServerList).statistics().disable();
        cb.addContextInitializer(InfinispanMessageContextInitializerImpl.class.getName());
        if (hotrodSni != null && hotrodSni.length() > 3) {
            LOGGER.debugf("Datagrid client SNI configured: %s", hotrodSni);
            cb.security().ssl().sniHostName(hotrodSni);
        }
        Configuration c = cb.build();
        LOGGER.debugf("CacheCreator::createCache() - RemoteCacheManager properties: %s", c);
        rcm = new RemoteCacheManager(c, true);
        return rcm;
    }

    @ClientListener
    static class EventPrintListener {

        @ClientCacheEntryCreated
        public void handleCreatedEvent(ClientCacheEntryCreatedEvent<String> e) {
            LOGGER.debugf("Entity(%s) created", e.getKey());
        }

        @ClientCacheEntryModified
        public void handleModifiedEvent(ClientCacheEntryModifiedEvent<String> e) {
            LOGGER.debugf("Entity(%s) modified, it should not be happened!!!", e.getKey());
        }

        @ClientCacheEntryRemoved
        public void handleRemovedEvent(ClientCacheEntryRemovedEvent<String> e) {
            LOGGER.debugf("Entity(%s) successfully handled, removing from cache", e.getKey());
        }
    }
}
